# BSD 3-Clause License
#
# Copyright (c) 2018, Pruthvi Kumar All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
# following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this list of conditions and the following
# disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided with the distribution.
#
# Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

__author__ = "Pruthvi Kumar, pruthvikumar.123@gmail.com"
__copyright__ = "Copyright (C) 2018 Pruthvi Kumar | http://www.apricity.co.in"
__license__ = "BSD 3-Clause License"
__version__ = "1.0"

import gevent
import time
from gevent import monkey

class Parallel_Programming(object):

    def __init__(self):
        super(Parallel_Programming, self).__init__()

    def __generate_multiple_threads(self, associated_function, *args):
        """
        Parallel Programming is Tricky. Used well, reaps many benefits; if otherwise, it will be a nightmare.
        Multiple threading is advised for IO heavy ops (Like making multiple API calls concurrently). If what you want
        is not IO heavy but CPU heavy, consider multi processing instead. Multi Threading is not best suited or CPU
        intense operations.

        :param associated_function: function that the greenlet is supposed to execute.
        :param args: Dynamic argument list. Will resolve to a tuple.
        :return: a greenlet.
        """

        # ensure monkey patching for gevents to work their charm.
        # remember - monkey patching is a necessary evil here.
        monkey.patch_socket()
        monkey.patch_ssl()

        return gevent.spawn(associated_function, *args)

    def __execute_multiple_threads(self, greenlets_pool, time_since_pool = None):
        """

        :param greenlets_pool: a list of greenlets
        :param time_since_pool: time.time() value. This essentially must be the time when pool was generated by
        generate_multiple_threads
        :return: results in dictionary suggesting time of execution. StartTime, endTime-StartTime
        """

        start_time = time.time()
        gevent.joinall(greenlets_pool)
        greenlets_value_pool = map(lambda g: g.value, greenlets_pool)
        end_time = time.time()

        return {
            'execution_time': end_time - start_time,
            'execution_time_since_pool_gen': None if time_since_pool is None else end_time - time_since_pool,
            'results_pool': greenlets_value_pool
        }
